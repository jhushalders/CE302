for(i in dado){
for(j in dado){
k = k + 1
soma = soma_dois_dados(dado[i], dado[j])
somaqd = quadrado_soma(soma)
resultado[[k]] = data.frame(dado1 = dado[i],
dado2 = dado[j],
soma = soma,
soma2 = somaqd)
}
}
resultado
resultado %<>%
bind_rows()
resultado
#lapply(): Aplica uma função a cada elemento de uma lista e retorna uma lista com os resultados.
minha_lista <- list(a = c(1, 2, 3), b = c(4, 5, 6))
resultados <- lapply(minha_lista, mean)
resultados
#Apply - Aplica uma função qualquer a uma matriz, array ou data.frame ao longo de margens específicas
#(linhas 1 ou colunas 2). O output de um apply() é um vetor.
matriz1 <- matrix(1:6, nrow = 2)
soma_linhas <- apply(matriz1, 1, median)
soma_colunas <- apply(matriz1, 2, sum)
data("iris")
minha_media <- function(vetor_de_dados){
media = sum(vetor_de_dados)/length(vetor_de_dados)
media = round(media, 2) #duas casas decimais
return(media)
}
minha_media <- function(vetor_de_dados){
media = sum(vetor_de_dados)/length(vetor_de_dados)
media = round(media, 2) #duas casas decimais
return(media)
}
minha_media(iris$Sepal.Length)
minha_media(iris$Sepal.Length,6)
minha_media <- function(vetor_de_dados, digitos = 2){
media = sum(vetor_de_dados)/length(vetor_de_dados)
media = round(media, digitos) #duas casas decimais
return(media)
}
minha_media(iris$Sepal.Length,6)
minha_media <- function(vetor_de_dados, digitos = 2){ #usuario coloca o numero de digitos, caso nao coleque, default é 2
media = sum(vetor_de_dados)/length(vetor_de_dados)
media = round(media, digitos) #media = round(media, 2) duas casas decimais
return(media)
}
meu_desvio_padrao_amostral <- function(vetor) {
media <- minha_media(vetor)
diferenca <- vetor - media  # Calcula as diferenças em relação à média
quadrados <- diferenca^2  # Calcula os quadrados das diferenças
variancia <- sum(quadrados) / (length(vetor) - 1)  # Calcula a variância
desvio_padrao <- sqrt(variancia)  # Calcula o desvio padrão
return(desvio_padrao)
}
meu_desvio_padrao_amostral(iris$Sepal.Length)
meu_desvio_padrao_amostral <- function(vetor) {
media <- minha_media(vetor, na.rm = T)
diferenca <- vetor - media  # Calcula as diferenças em relação à média
quadrados <- diferenca^2  # Calcula os quadrados das diferenças
variancia <- sum(quadrados) / (length(vetor) - 1)  # Calcula a variância
desvio_padrao <- sqrt(variancia)  # Calcula o desvio padrão
out - data.frame(media = media,
desvio = desvio_padrao)
return(out)
}
meu_desvio_padrao_amostral(iris$Sepal.Length)
meu_desvio_padrao_amostral <- function(vetor) {
media <- minha_media(vetor)
diferenca <- vetor - media  # Calcula as diferenças em relação à média
quadrados <- diferenca^2  # Calcula os quadrados das diferenças
variancia <- sum(quadrados) / (length(vetor) - 1)  # Calcula a variância
desvio_padrao <- sqrt(variancia)  # Calcula o desvio padrão
out - data.frame(media = media,
desvio = desvio_padrao)
return(out)
}
meu_desvio_padrao_amostral(iris$Sepal.Length)
meu_desvio_padrao_amostral <- function(vetor) {
media <- minha_media(vetor)
diferenca <- vetor - media  # Calcula as diferenças em relação à média
quadrados <- diferenca^2  # Calcula os quadrados das diferenças
variancia <- sum(quadrados) / (length(vetor) - 1)  # Calcula a variância
desvio_padrao <- sqrt(variancia)  # Calcula o desvio padrão
out = data.frame(media = media,
desvio = desvio_padrao)
return(out)
}
meu_desvio_padrao_amostral(iris$Sepal.Length)
x <- -5
if (x < 0) {
message("O valor de x é negativo.")
}
x <- -5
if (x < 0) {
cat("O valor de x é negativo.") #branco
}
if (x < 0) {
warning("O valor de x é negativo.")
}
if (x < 0) {
stop("O valor de x é negativo.")
}
idade <- 25
if (idade >= 18) {
cat("Você é maior de idade.\n")
} else {
cat("Você é menor de idade.\n")
}
#IF ALINHADOS
pontuacao = 90
if (pontuacao >= 90) {
nota = "A"
} else {
if (pontuacao >= 80) {
nota = "B"
} else {
if (pontuacao >= 70) {
nota = "C"
} else {
nota = "D"
}
}
}
nota
#Podemos estar interessado em criar uma função para determinarmos o Quadrante de um Ponto no Plano Cartesiano,
#essa função recebe como entrada dois valores, as coordenadas (x, y).
quadrante <- function(x, y) {
if (x > 0) {
if (y > 0) {
quadrante = "Quadrante 1"
cat(paste0("O ponto (", x, ", ", y, ") pertence ao ",  quadrante))
return(quadrante)
} else {
quadrante = "Quadrante 4"
cat(paste0("O ponto (", x, ", ", y, ") pertence ao ",  quadrante))
}
} else {
if (y > 0) {
quadrante = "Quadrante 2"
cat(paste0("O ponto (", x, ", ", y, ") pertence ao ",  quadrante))
} else {
quadrante = "Quadrante 3"
cat(paste0("O ponto (", x, ", ", y, ") pertence ao ",  quadrante))
}
}
}
quadrante(1, 1)
#If_else e ifelse
iris %<>%
mutate(cat_petal.len = ifelse(Petal.Length > mean(Petal.Length), "Longa", "Curta"))
iris %<>%
mutate(cat_petal.len2 = if_else(Petal.Length > mean(Petal.Length), "Longa", "Curta"))
iris
#switch
dia_da_semana <- "segunda"
mensagem <- switch(dia_da_semana,
"segunda" = "Hoje é segunda-feira.",
"terca" = "Hoje é terça-feira.",
"quarta" = "Hoje é quarta-feira.",
"quinta" = "Hoje é quinta-feira.",
"sexta" = "Hoje é sexta-feira.",
"sabado" = "Hoje é sábado.",
"domingo" = "Hoje é domingo.",
"Outro" = "Dia não reconhecido."
)
cat(mensagem)
#case_when
iris$cat_sepal =
case_when((iris$Sepal.Length < mean(iris$Sepal.Length) - sd(iris$Sepal.Length)) ~ "X < media - 1 sd",
(iris$Sepal.Length < mean(iris$Sepal.Length) + sd(iris$Sepal.Length)) ~ "X < media + 1 sd",
.default = "X > media + 1 sd")
gitcreds::gitcreds_set()
system("ls data/filmes")
system("ls/filmes")
system("filmes")
list.files("filmes")
system("filmes")
files = list()
for (i in 1:length(files)) {
data.table::fread(paste0("filmes", files[i]))
}
list.files("filmes")
Files = list()
for (i in 1:length(files)) {
Files[[]] data.table::fread(paste0("filmes", files[i]))
list.files("filmes")
Files = list()
for (i in 1:length(files)) {
Files[[]] data.table::fread(paste0("filmes/", files[i]))
Files[[]] data.table::fread(paste0("filmes/", files[i]))
list.files("filmes")
Files = list()
for (i in 1:length(files)) {
Files[[]] = data.table::fread(paste0("filmes/", files[i]))
}
Files = list()
for (i in 1:length(files)) {
Files[[i]] = data.table::fread(paste0("filmes/", files[i]))
}
list.files("filmes")
Files = list()
for (i in 1:length(files)) {
Files[[i]] = data.table::fread(paste0("filmes/", files[i]))
}
files = list.files("filmes")
Files = list()
for (i in 1:length(files)) {
Files[[i]] = data.table::fread(paste0("filmes/", files[i]))
}
Files = list.files("filmes")
Files = list()
for (i in 1:length(files)) {
Files[[i]] = data.table::fread(paste0("filmes/", files[i]))
}
Files
Files[[1]]
View(Files)
#AULA 27/11
require(tidyverse)
View(Files)
Files %<>% bind_rows()
require(magrittr)
Files %<>% bind_rows()
Files = list()
for (i in 1:length(files)) {
Files[[i]] = data.table::fread(paste0("filmes/", files[i])) %>%
mutate(year = as.numeric(year))
}
Files %<>% bind_rows()
filmes %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year, y = `gross(in $)`) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() # Fazer o scatterplot
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year, y = `gross(in $)`) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() # Fazer o scatterplot
#juntando os bancos de dados
Files = list()
for (i in 1:length(files)) {
Files[[i]] = data.table::fread(paste0("filmes/", files[i])) %>%
mutate(year = as.numeric(year)) %>%
mutate(tipo = stringr::str_remove(files[i], ".csv")
}
#juntando os bancos de dados
Files = list()
for (i in 1:length(files)) {
Files[[i]] = data.table::fread(paste0("filmes/", files[i])) %>%
mutate(year = as.numeric(year)) %>%
mutate(tipo = stringr::str_remove(files[i], ".csv"))
}
Files %<>% bind_rows()
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() # Fazer o scatterplot
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() +# Fazer o scatterplot
theme_minimal
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() +# Fazer o scatterplot
theme_minima ()
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() +# Fazer o scatterplot
theme_minimal ()
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() +# Fazer o scatterplot
theme_minimal () +
facet_wrap(vars(tipo))
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() +# Fazer o scatterplot
theme_minimal () +
facet_wrap(vars(tipo), scales = "fixed")
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() +# Fazer o scatterplot
theme_minimal () +
facet_wrap(vars(tipo), scales = "x_fixed")
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() +# Fazer o scatterplot
theme_minimal () +
facet_wrap(vars(tipo), scales = "free_y")
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point() +# Fazer o scatterplot
scale_size_continuous(range = c(0,2)) +
theme_minimal () +
facet_wrap(vars(tipo), scales = "free_y")
Files %>% # Carregar o banco
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point(alpha = 0.2) +# Fazer o scatterplot
scale_size_continuous(range = c(0,2)) +
theme_minimal () +
facet_wrap(vars(tipo), scales = "free_y")
Files %>% # Carregar o banco
filter(tipo=="thriller")
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point(alpha = 0.2) +# Fazer o scatterplot
scale_size_continuous(range = c(0,2)) +
theme_minimal () +
facet_wrap(vars(tipo), scales = "free_y")
Files %>% # Carregar o banco
filter(tipo%in%"thriller") %>%
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point(alpha = 0.2) +# Fazer o scatterplot
scale_size_continuous(range = c(0,2)) +
scale_
theme_minimal () +
labs(x="Ano", y = "Faturamento", size = "Ano", color = "filme") +
theme(legend.position = "bottom",
text = element_text(size=15))
Files %>% # Carregar o banco
filter(tipo%in%"thriller") %>%
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point(alpha = 0.2) +# Fazer o scatterplot
scale_size_continuous(range = c(0,2)) +
theme_minimal () +
labs(x="Ano", y = "Faturamento", size = "Ano", color = "filme") +
theme(legend.position = "bottom",
text = element_text(size=15))
Files %>% # Carregar o banco
filter(tipo%in%"thriller") %>%
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point(alpha = 0.2) +# Fazer o scatterplot
scale_size_continuous(range = c(0,2)) +
scale_y_continuous(labels = scales::label_log)+
theme_minimal () +
labs(x="Ano", y = "Faturamento", size = "Ano", color = "filme") +
theme(legend.position = "bottom",
text = element_text(size=15))
Files %>% # Carregar o banco
filter(tipo%in%"thriller") %>%
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point(alpha = 0.2) +# Fazer o scatterplot
scale_size_continuous(range = c(0,2)) +
theme_minimal () +
labs(x="Ano", y = "Faturamento", size = "Ano", color = "filme") +
theme(legend.position = "bottom",
text = element_text(size=15))
Files %>% # Carregar o banco
filter(tipo%in%"thriller") %>%
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point(alpha = 0.2) +# Fazer o scatterplot
geom_smooth()+
scale_size_continuous(range = c(0,2)) +
theme_minimal () +
labs(x="Ano", y = "Faturamento", size = "Ano", color = "filme") +
theme(legend.position = "bottom",
text = element_text(size=15))
Files %>% # Carregar o banco
filter(tipo%in%"thriller") %>%
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point(alpha = 0.2) +# Fazer o scatterplot
geom_smooth(method="loess")+
scale_size_continuous(range = c(0,2)) +
theme_minimal () +
labs(x="Ano", y = "Faturamento", size = "Ano", color = "filme") +
theme(legend.position = "bottom",
text = element_text(size=15))
Files %>% # Carregar o banco
filter(tipo%in%"thriller") %>%
ggplot() + ## Chamar o ggplot
aes( x = year,
y = `gross(in $)`,
color = tipo,
size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
geom_point(alpha = 0.2) +# Fazer o scatterplot
geom_smooth(method = "loess")+
scale_size_continuous(range = c(0,2)) +
theme_minimal () +
labs(x="Ano", y = "Faturamento", size = "Ano", color = "filme") +
theme(legend.position = "bottom",
text = element_text(size=15))
Files %>%
group_by(year, tipo) %>%
summarise(Valor_Gasto_Medio = mean(`gross(in $)`, na.rm = TRUE)) %>%
ggplot() +
aes( x = year,
y = Valor_Gasto_Medio,
color = tipo) +
geom_line() +
facet_wrap(vars(tipo)) +
theme_minimal()
Files %>%
group_by(year, tipo) %>%
summarise(Valor_Gasto_Medio = mean(`gross(in $)`, na.rm = TRUE)) %>%
ggplot() +
aes( x = year,
y = Valor_Gasto_Medio,
color = tipo) +
geom_line() +
geom_point()
Files %>%
group_by(year, tipo) %>%
summarise(Valor_Gasto_Medio = mean(`gross(in $)`, na.rm = TRUE)) %>%
ggplot() +
aes( x = year,
y = Valor_Gasto_Medio,
color = tipo) +
geom_line(alpha=0.5) +
geom_point()
Files %>%
group_by(year, tipo) %>%
summarise(Valor_Gasto_Medio = mean(`gross(in $)`, na.rm = TRUE)) %>%
ggplot() +
aes( x = year,
y = Valor_Gasto_Medio,
color = tipo,
seize = year) +
geom_line(alpha=0.5) +
geom_point()
Files %>%
group_by(year, tipo) %>%
summarise(Valor_Gasto_Medio = mean(`gross(in $)`, na.rm = TRUE)) %>%
ggplot() +
aes( x = year,
y = Valor_Gasto_Medio,
color = tipo,
size = year) +
geom_line(alpha=0.5) +
geom_point()
Files %>%
group_by(year, tipo) %>%
summarise(Valor_Gasto_Medio = mean(`gross(in $)`, na.rm = TRUE)) %>%
ggplot() +
aes( x = year,
y = Valor_Gasto_Medio,
color = tipo,
size = year) +
geom_line(alpha=0.2) +
geom_point()
esquisse:::esquisser()
esquisse:::esquisser()
esquisse:::esquisser()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
